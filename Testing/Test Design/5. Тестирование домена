Техники тест-дизайна 
Динамическое Тестирование методом черного ящика.

Техники тест-дизайна | Тестирование домена. Часть #5
(Доменное тестирование или анализ домена).

Тестирование домена это методика проведения тестов направленная
на анализ и тестирование нескольких входных значений одновременно, 
в рамках одного функционала или взаимосвязи элементов объеденненых
одной логической цепочкой. 
Данная техника включает в себя эквивалентное разделение и анализ
граничных значений.

Определение по ISTQB.
Тестирование домена (domain testing) - это методика разработки
тестов, относящаяся к методу черного ящика, использующаяся для 
определения действенных и эффективных тестовых сценариев в 
случаях, когда множественные параметры могут или должны быть
протестированы ОДНОВРЕМЕННО. Методика базируется и обобщает 
методы эквивалентного разбиения и анализа граничных значений.

Существуеют две важные причины применения данной техники:
1. Ограниченное время на создание тестот-кейсов для каждой
переменной в нашей системе.
2. Этих переменных слишком много.

Эсли тестировать эти переменные по одиночке, то мы точно упустим
дифекты, которые будут появляться при взаимодействии между собой
этих переменых. Особенно когда они зависят друг от друга.
Данная техника содавалась для тестирования числовых значений,
но она так же успешно используется и для других типов данных.

В доменном тестировании входные данные считаются эквивалентными
если программа использует один и тот же путь выполнения для их 
обработки или получает однотипный результат.

Стратегия доменного тестирования:
1. Выбор домена.
2. Группирование входных данных в классы.
3. Определение входных данных классов для тестирования.
   (комбинирование тестов)
4. Выполнение тестов и проверка выходных данных.

1. Выбор домена.
Домен - нобор параметров, которые объеденены в одном функционале 
или находятся в одной логической цепочке и взаимосвязаны между собой.
Например добавление проекта в рабочий фреймворк - логичеки связанные
между сабой шаги в рамках одного функционала по добавлению и заполнению
разных данных в рамках одной цели - добавить проект.

Основные шаги.
В приложении как правило есть входные переменные, которые в рамках 
одного функционала должны быть:
- назанчены 
- отправлены
- получен один общий результат, который необходимо проверить.
-----------------

2. Группирование входных данных в классы.
Типы входных данных разбиваются на подмножества.
Существует два типа разделения:
- разделение по эквивалентным классам
- разделение по граничным значениям.

Разделение по классам эквивалентности разбивает входные данные 
на эквивалентные разделы данных для определения контрольных примеров.
Тестовые случаи должны разрабатываться таким образом, что бы каждый 
раздел покрывался за один раз.

При Тестировании анализа граничных значений тестовые случаи 
разрабатываются с учетом не допустимого диапозона граничных значений.
Т.е. в месте с позитивным проводится и негативное тестирвание с 
некоректными данными.
---------------------

3. Определение входных данных классов для тестирования.
Именно граничные значения следует рассматривать как данные для 
тестирования. Т.е. мы сгруппировали наши входящие данные в 
класс эквивалентности и далее для значений, которые будут 
использоваться у нас для тестов, мы выбираем именно граничные
значения. Границы представляют класс эквивалентности, которые
с большей вероятностью однаружат ошибки, чем другие члены класса. 
Данные между этими диапозонами как раз и являются лучшими 
представителями класса эквивалентности.
На основе выбранных входных данных мы уже и комбинируем
тестовые случаи.
--------------------

4. Выполнение тестов и проверка выходных данных, т.е. анализ 
результатов. Когда входные данные для тестов подобраны, сформированы
тест-кейсы, тогда мы приступаем к тестированию. 
Входные данные должны соответствовать диапазону допустимых значений,
т.е. ожидаемому результату. 
--------------------

Из каждого раздела выполняется только одно условие теста.
Если одно условие теста работает правильно в разделе, то скорее всего
остальные условия теста тоже будут работать правильно и наоборот.

Ключевые задачи при доменном тестировании:
1. Определение классов эквивалентности.
2. Определение наиболее показательных значений (граничные значения).
3. Определение взаимозависимостей.
4. Формирование минимального и оптимального набора показательных тестов.

Плюсы доменного тестирования:
- Обнаружение ошибок при минимальном количестве тестов.
- Интуитивно понятный, универсальный подход.

Минусы доменного тестирования:
- Низкая верояность обнаружения ошибок НЕ на граничных условиях.
- Низкая верояность обнаружения ошибок в сложных взаимодействиях.
- Пространство значений часто бывает сложно формализовать.

Полезные советв для проведения доменного (и не только) тестирования:
1. Делим или умножаем на два:
- Ввводим в поле, полный набор непринимающих спецсимволов.
Если что-то пошло не так, вводим половину, потом половину 
половины и т.д. 
- Если надо выяснить максимальную длину принимаемого текста,
каждый раз удваиваем ее. Когда нашли проблему, добавляем по 1/4 от
предедущего успешного результата.

2. Позитивное вместе, негативное отдельно:
- Несколько позитивных тестов (например, ввод данных в Несколько полей)
можно провести за один раз. При этом негативные тесты так комбинировать
нельзя, т.к. мы должны убедиться, что программа корректно отслеживает
проблемы с каждым из полей.

3. Используем готовые чек-листы.
- В большенстве случаев вы не первый кто проводит доменное тестирование, 
Можно найти в сети уже готовые чек-листы для доменного тестирования, 
которые существенно облегчат вам решение ваших задач.