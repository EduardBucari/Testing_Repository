Словарь тестовых терминов

Словарь терминов позволит вам ознакомиться с лексикой, которую мы будем использовать 
в ходе курса и с которой вы встретитесь в ИТ-индустрии. 
Это облегчит общение в рамках тестирования и совместной работы над проектом.

Словарь основан на официальном словаре терминов, связанных с тестированием, 
подготовленном Ассоциацией качества информационных систем (SJSI).

Этот словарь имеет две основные цели:
- облегчить понимание программ ISTQB, определив термины, используемые 
в разных программах.
- облегчать общение в международной среде тестирования и ее заинтересованных 
сторон, вводя стандартную лексику.
------------------
- актор: пользователь или любое другое лицо или система, которые определенным 
образом взаимодействуют с тестируемой системой.
- анализ рисков: процесс выявления рисков и их оценки.
- статический анализ: процесс оценки модуля или системы без их выполнения на 
основе их формы, структуры, содержания или документации.
- Анализ граничных значений: метод проектирования тестовых случаев черного ящика, 
при котором случаи разрабатываются на основе граничных значений.
- анализ воздействия: выявление всех затронутых рабочих продуктов, включая 
оценку ресурсов, необходимых для внесения изменений.
- статический анализатор кода: инструмент, выполняющий статический анализ кода.
- атака: Целенаправленное действие для оценки качества, в частности надежности 
объекта тестирования, путем принудительного возникновения определенного сбоя.
- качественный атрибут: черта или свойство, влияющее на качество объекта.
- Автоматизация тестирования: использование программного обеспечения для выполнения 
или поддержки тестовых действий, таких как управление тестированием, разработка 
тестов, выполнение тестов и проверка результатов.
- авария, сбой: отклонение модуля или системы от ожидаемого поведения или результата.
-------------------
- Безопасность: Способность системы при определенных условиях избегать достижения 
состояния, представляющего опасность для жизни, здоровья, имущества или 
окружающей среды человека.
- белый ящик (методы проектирования тестов) : Процедура создания и выбора 
тестовых случаев на основе анализа внутренней структуры модуля или системы.
- ошибка (error): действие человека, которые привели к неверному результату.
--------------------
- Цель теста: Причина или повод разработки и выполнения теста.
- сертификация: процесс подтверждения того, что модуль, система или человек 
соответствуют указанным требованиям. Сертификат можно получить, например, сдав экзамен.
- COTS: аббревиатура от Commercial Off-The-Shelf Software.
Готовое коммерческое программное обеспечение.(Рабочее ПО с полки).
- Жизненный цикл программного обеспечения: период времени, который начинается, 
когда возникает идея программного обеспечения, и заканчивается, когда программное 
обеспечение больше не доступно для использования. Как правило, жизненный цикл 
программного обеспечения включает этап концепции, этап требований, 
этап проектирования, этап внедрения, этап тестирования, этап установки и замены, 
этап производственного использования и обслуживания, а иногда и этап 
вывода из эксплуатации. 
Примечание: Эти этапы могут перекрываться или повторяться.
- черный ящик (Техника проектирования тестов) : процедура получения и выбора 
тестовых наборов на основе анализа спецификации, функциональной или 
нефункциональной, модуля или системы без привязки к ее внутренней структуре.
--------------------
- тестовые данные: данные, созданные или выбранные для выполнения предварительных 
условий и указания входных данных для выполнения тестовых случаев.
- Входные данные теста: данные, полученные из внешнего источника и переданные 
тестовому объекту во время выполнения теста. Внешний источник может быть 
аппаратным, программным или человеческим.
- отладка: процесс поиска, анализа и устранения причин сбоев программного обеспечения.
- решение: Тип утверждения, в котором выбор между двумя или более возможными 
результатами приводит к выполнению определенного набора действий.
- Дефект: Несовершенство или дефект в рабочем продукте, заключающийся 
в несоответствии требованиям.
- Диаграмма состояний: Диаграмма, показывающая состояния, которые может принимать 
модуль или система, а также события или обстоятельства, вызывающие и/или 
являющиеся результатом изменений состояния.
- домен: коллекция, из которой выбираются входные или выходные значения.
--------------------
- эффект семплера: эффект элемента измерения, влияющего на модуль или систему 
при выполнении измерения, например, с помощью инструмента проверки производительности. 
Например, производительность тестируемого программного обеспечения может немного 
ухудшиться при использовании тестового инструмента.
- тестовый эффект: набор критериев выхода.
- элемент тестирования: элемент объекта тестирования, который используется 
в процессе тестирования.
- эмулятор: Устройство, компьютерная программа или система, которые принимают 
те же входные данные и производят те же выходные данные, что и данная система.
--------------------
- фаза тестирования: выделенный набор тестовых действий, собранных на управляемой 
фазе проекта, например выполнение теста на некотором уровне тестирования.
- фаза выполнения теста: период в цикле разработки программного обеспечения, 
в течение которого создаются программные модули и оценивается само программное 
обеспечение, чтобы решить, были ли выполнены требования.
- Фаза требований: период времени в жизненном цикле программного обеспечения, 
в течение которого требования к программному обеспечению собираются и документируются.
- Функциональность: способность программного обеспечения обеспечивать функции, 
соответствующие определенным и ожидаемым потребностям, когда программное 
обеспечение используется в определенных условиях.
--------------------
- Плотность ошибок: количество ошибок, обнаруженных в модуле или системе, 
на единицу размера модуля или системы (выраженное в виде стандартной меры 
программного обеспечения, например, в строках кода, количестве классов или 
функциональных точек).
- основной план тестирования: план тестирования, охватывающий несколько 
уровней тестирования.
--------------------
- график тестирования: список действий, задач или событий из процесса тестирования 
с указанием их предполагаемых дат начала и окончания, времени выполнения и их 
взаимосвязей.
- График выполнения теста: график, описывающий последовательность, в которой 
тестовые наборы выполняются в рамках цикла тестирования.
- гиперссылка: указатель в электронном документе, который ссылается на другой 
электронный документ.
- история пользователя: поддающееся тестированию бизнес-требование, обычно 
используемое в Agile-разработке программного обеспечения, обычно состоящее из 
одного предложения, описывающего, какая утилита нужна пользователю и по каким 
причинам, а также нефункциональные критерии и критерии приемлемости.
------------------
- идентификация риска: процесс выявления рисков с использованием таких методов, 
как мозговой штурм, контрольные списки, история неудач.
- реализация теста: деятельность по подготовке тестового программного обеспечения, 
необходимого для выполнения теста, на основе анализа и дизайна теста.
- инцидент: любое событие, которое необходимо расследовать.
- инспекция: Тип формальной проверки, выполняемой для выявления проблем в рабочем 
продукте, который предоставляет данные измерений для улучшения процесса проверки 
и процесса разработки программного обеспечения.
- инструкция: элемент языка программирования, который обычно является наименьшей 
атомарной единицей выполнения.
- исполняемая инструкция : выражение, которое преобразуется в двоичный код во 
время компиляции и которое будет процедурно выполняться во время работы программы. 
Она может выполнять действия над данными программы.
- интеграция: процесс объединения модулей или систем в более крупные группы.
- Модель итеративной разработки: жизненный цикл разработки программного обеспечения, 
в котором проект разбивается на несколько итераций. 
Итерация — это замкнутый цикл разработки, результатом которого является готовая 
к выпуску версия продукта (внутренняя или внешняя).
-------------------
- качество: степень, в которой модуль, система или процесс соответствует заданным 
требованиям и/или соответствует потребностям и ожиданиям заказчика или пользователя.
- качество данных: характеристика данных, которая демонстрирует их правильность 
по заранее определенным критериям, например бизнес-требованиям, требованиям 
целостности данных, непротиворечивости данных.
- качество программного обеспечения: все функциональные возможности и особенности 
программного обеспечения, характеризующие способность удовлетворять заявленные 
или ожидаемые потребности.
- jarzmo testowe: тестовая среда, состоящая из подключаемых модулей и драйверов, 
необходимых для выполнения теста.
- язык скриптов или сценариев: язык программирования, на котором написаны тестовые 
сценарии, используемые инструментом запуска теста (например, инструментом 
записи/воспроизведения).
-------------------
- kamień milowy (веха): точка во время реализации проекта, для которой были 
определены (промежуточные) продукты и результаты.
milestone - a stone set up beside a road to mark the distance in miles to a 
particular place.
- руководитель тестирования: лицо, ответственное за управление проектом по тестированию, 
за ресурсы, за действия в тестировании, и за оценку элемента тестирования. 
Лицо, которое направляет, управляет, администрирует, планирует и регулирует 
оценку испытуемого.
- класс эквивалентности: подмножество области значений элемента тестового объекта, 
для которого на основе спецификации предполагается, что все значения будут 
обрабатываться системой одинаково.
- код: компьютерные инструкции и определения данных, выраженные на языке 
программирования или выведенные на ассемблере, компиляторе или трансляторе.
- Test Comparator: тестовый инструмент для автоматического сравнения фактических 
результатов с ожидаемыми.
- компилятор: Инструмент, который переводит программы, написанные на языке 
высокого уровня, в их аналоги на машинном языке.
- конфигурация: расположение модулей или система, определяемая числами, их природой 
и связями между ее компонентами.
- Контроль за конфигурацией: Компонент управления конфигурацией, 
состоящий из оценки, согласования и одобрения или несогласия с изменением 
элементов конфигурации и внедрения изменений после формальной идентификации 
элемента конфигурации.
- мастер установки: Программное обеспечение на подходящем носителе, которое 
помогает установщику выполнить процесс установки. Как правило, он выполняет 
процесс установки, сообщает о его результатах и ​​предлагает вам выбрать вариант.
- Критерии приемки: критерии выхода, которым должен соответствовать модуль или 
система, чтобы быть принятыми пользователем, заказчиком или другим 
квалифицированным лицом.
- критерии возобновления: критерии, используемые для возобновления некоторых 
или всех операций тестирования, которые ранее были приостановлены.
- Критерии прохождения/непрохождения: правила принятия решений, используемые 
для определения того, прошел ли тест объект или функция.
- Критерии приостановки: Критерии, используемые для (временной) остановки 
всех или части тестовых действий над элементами теста.
- Критерий входа: Набор общих и конкретных условий, которые необходимо выполнить 
для продолжения процесса для конкретной задачи, например фазы тестирования. 
Цель критерия входа состоит в том, чтобы защитить задачу от запуска, когда 
она влечет за собой больше (бесполезной) работы, чем работа, необходимая 
для выполнения критерия входа.
- Критерий выхода: набор общих и конкретных условий, согласованных с 
заинтересованными сторонами, необходимых для официального завершения процесса. 
Цель критерия выхода — не допустить, чтобы задача считалась выполненной в том случае, 
если некоторые ее элементы еще не полностью выполнены. 
Критерии выхода используются в качестве аргумента против завершения теста 
и для планирования того, когда это можно сделать.
---------------------------
- журнал тестирования: хронологическая запись деталей, связанных с выполнением теста.
- ведение журнала испытаний: процесс регистрации информации о проведенных 
испытаниях в журнале испытаний.
---------------------------
- тестирование на обезьянах: метод тестирования, который случайным образом выбирает 
из широкого диапазона входных данных и нажимает кнопки случайным образом, 
игнорируя способ использования продукта.
- Agile манифест. (Манифест гибкой разработки программного обеспечения)
Определение принципов, лежащих в основе гибкой разработки программного обеспечения. 
Эти правила таковы:
    1. Люди и совместная работа выше чем процессы и инструменты;
    2. Работающее программное обеспечение выше обширной документацией;
    3. тесное общение с клиентом выше формальных договоренностей;
    4. Реагирование на изменение выше чем следования плану.

- интеллект-карта (карта мысли): Диаграмма, используемая для представления слов, 
идей, задач или других элементов, связанных с центральным словом или идеей и 
расположенных вокруг них. Карта разума используется для создания, визуализации, 
структурирования и классификации идей, а также в качестве вспомогательного средства 
для познания, организации, решения проблем, принятия решений и написания.
- маскирование дефекта: ситуация, при которой наличие одного дефекта препятствует 
обнаружению другого.
- Матрица ответственности — модель RACI: Матрица, показывающая участие различных 
ролей в выполнении задач или продуктов в проекте или процессе. 
Это особенно полезно для уточнения ролей и обязанностей. 
RACI — это аббревиатура, полученная из четырех наиболее часто используемых 
ключевых обязанностей: ответственный (Responsible)), подотчетный (Accountable), 
консультируемый (Consulted) и информированный (Informed).
- Метрика: шкала измерения и способ ее применения.
- Миссия тестирования: Цель тестирования в организации, часто документируемая 
как часть политики тестирования.
- модель жизненного цикла: Разбивка жизни продукта или проекта на этапы.
- модель V: модель последовательного жизненного цикла, описывающая непосредственную 
связь между основными этапами разработки от спецификации бизнес-требований до 
поставки и соответствующие уровни тестирования, от приемочного тестирования до 
тестирования компонентов.
- модератор: Беспристрастный человек, который проводит сеанс тестирования 
удобства использования.
- модуль: наименьшая часть программы, которая будет тестироваться изолированно, 
независимо от других модулей.
- мониторинг тестирования: задача управления тестированием, которая периодически 
проверяет состояние тестового проекта. Подготавливаются отчеты, сравнивающие 
текущее и планируемое состояние. (См. также управление тестированием).
---------------------------
- Управление тестированием (надзор): задача управления тестированием направленна 
на разработку и применение корректирующих действий к дизайну тестирования, когда 
мониторинг показывает отклонение от плана.
- лучшая практика: рекомендуемый метод или новая практика, которая способствует 
повышению эффективности работы организации в конкретном контексте, обычно 
считающаяся «лучшей» другими подобными организациями.
- инструмент динамического анализа: инструмент, записывающий информацию о состоянии 
выполняемой программы. Такие инструменты чаще всего используются для поиска 
неназначенных указателей, проверки выделения, использования и освобождения памяти, 
а также для отметки утечек памяти.
- инструмент отладки: инструмент, используемый разработчиками для аварийного 
восстановления, отслеживания состояния программы и устранения ошибок. 
Отладчики позволяют программистам выполнять программы шаг за шагом, останавливать 
выполнение программы на любой инструкции, а также проверять и устанавливать 
значения переменных.
- инструмент моделирования: инструмент, поддерживающий проверку программных моделей 
или систем.
- инструмент разработки тестов: инструмент, который поддерживает разработку тестов 
путем создания входных данных из спецификации (хранящейся, например, в системном 
репозитории CASE, подобно инструменту управления требованиями), из заданных условий 
тестирования, хранящихся в самом инструменте, или из кода.
- инструмент подготовки тестовых данных: Тип инструмента тестирования, 
который позволяет выбирать данные из существующей базы данных или создавать, 
генерировать, обрабатывать и редактировать данные для использования в тестировании.
- Инструмент нагрузочного тестирования: инструмент поддержки нагрузочного тестирования,
который можно использовать для имитации возрастающей нагрузки, такой как количество 
работающих в настоящее время пользователей и/или количество транзакций за 
определенный период времени.
- Инструмент стресс-тестирования: инструмент, поддерживающий стресс-тестирование.
- инструмент тестирования производительности: инструмент поддержки тестирования 
производительности, который обычно имеет две функции: создание нагрузки и 
измерение транзакций. Сгенерированная нагрузка может имитировать как множество 
пользователей, так и большой объем вводимых данных. 
Во время выполнения теста регистрируются только измерения выбранных транзакций. 
Инструменты тестирования производительности обычно предоставляют отчеты на основе 
зарегистрированных транзакций и графиков нагрузки в зависимости от времени отклика.
- инструмент тестирования безопасности: инструмент, поддерживающий тестирование 
характеристик безопасности и уязвимостей.
- Инструмент выполнения теста: тип инструмента тестирования, который другое 
программное обеспечение может выполнять с помощью автоматизированных тестовых 
сценариев, например, инструмент записи/воспроизведения.
- инструмент управления дефектами: инструмент, который помогает записывать 
информацию о дефектах и ​​отслеживать их состояние и изменения. 
Такие инструменты часто имеют функции для отслеживания и контроля рабочего процесса, 
связанного с назначением, исправлением и повторным тестированием дефектов, 
а также имеют функции отчетности.
- Инструмент управления инцидентами: Инструменты, облегчающие регистрацию 
инцидентов и отслеживание их статуса. Они часто предлагают возможности отслеживания, 
ремонта и повторных испытаний. Они также предоставляют возможности отчетности.
- инструмент управления конфигурацией: инструмент, поддерживающий идентификацию 
и контроль элементов конфигурации, их статусов и версий при внесении изменений 
и создании изданий/публикаций, которые они включают.
- инструмент управления тестированием: инструмент, поддерживающий управление 
тестированием и контролирующий часть процесса тестирования. Обычно он имеет 
несколько функций, таких как управление тестированием, планирование тестирования 
с течением времени, регистрация результатов, отслеживание хода работы, 
управление инцидентами и отчеты о результатах тестирования.
- инструмент управления требованиями: инструмент, поддерживающий регистрацию 
требований и их атрибутов, с возможностью отслеживать отношения между уровнями 
требований и управлять изменениями в требованиях. 
Некоторые инструменты имеют функции, позволяющие выполнять статический анализ, 
например, проверку краткости требований или отклонений от определенных правил, 
касающихся требований.
- Инструмент измерения покрытия: Инструмент, обеспечивающий объективную оценку того, 
какие структурные элементы (например, инструкции, ответвления) были проверены 
с помощью тестового комплекта.
- инструмент с открытым исходным кодом: инструмент разработки, который доступен 
всем потенциальным пользователям в форме исходного кода, обычно через Интернет. 
Как правило, в форме лицензии на исследование, изменение, исправление и иногда 
распространение программного обеспечения.
- средство записи и восстановления: тип средства выполнения теста, в котором 
входные данные записываются во время ручных тестов для создания автоматических 
сценариев, которые можно запускать позже (т. е. повторить). 
Эти инструменты часто используются для поддержки автоматизированного регрессионного 
тестирования.
- Инструмент тестирования: Программное обеспечение, которое поддерживает одно 
или несколько тестовых действий, таких как планирование, управление, спецификация, 
создание исходных файлов и данных, выполнение теста и анализ.
- Инструмент поддержки проверки: инструмент, обеспечивающий поддержку в процессе 
проверки. Типичными функциями этого инструмента являются поддержка планирования 
и отслеживания обзоров, поддержка связи и совместной работы для обзоров, 
а также ведение репозитория для сбора показателей и отчетности.
- недостижимый код: код, который недоступен и поэтому не выполняется.
- Независимость тестирования: разделение обязанностей, которое 
помогает обеспечить объективность тестирования.
- Надежность: Способность программного обеспечения выполнять требуемую функцию 
в определенных условиях в течение определенного периода времени или в течение 
определенного количества операций.
- неуспешный тест: тест считается неудачным, если фактический результат не 
соответствует ожидаемому.
- несоответствие: несоблюдение конкретного требования.
- Стандарт: формальный, по возможности обязательный, набор требований, разработанный 
и используемый для описания рекомендуемого последовательного подхода к способу 
работы или предоставления руководства (например, стандарты ISO/IEC, 
стандарты IEEE или стандарты в организациях).
----------------------------------------
- обработка исключений: поведение модуля или системы в ответ на недопустимый ввод, 
введенный пользователем или другим модулем или системой.
- ожидаемый результат: поведение модуля или системы при определенных условиях и
определенных спецификациях.
- воспроизводимость: способность программного обеспечения достигать определенного 
уровня производительности и восстанавливать данные, поврежденные в результате сбоя.
- программное обеспечение: Компьютерные программы, процедуры, документация и данные, 
относящиеся к работе компьютерной системы.
- Готовое программное обеспечение: Программное обеспечение, представляющее собой 
продукт, разработанный для большого рынка, т. е. для большого числа клиентов, 
который поставляется многим клиентам в идентичной форме.
---------------------------------------
- Ремонтопригодность: легкость, с которой программное обеспечение может быть изменено 
для устранения дефектов, адаптации к новым требованиям, модификации для облегчения 
обслуживания в будущем или для адаптации к изменениям.
- план проверки: документ, описывающий подход, ресурсы и сроки предполагаемых 
действий по проверке. Он определяет, среди прочего, проверенные документы и код, 
типы используемых проверок, участники и критерии входа и выхода, которые будут 
использоваться в официальных проверках, а также обоснование их выбора. 
- план тестирования: документация, описывающая цели тестирования, которые должны 
быть достигнуты, а также меры и сроки их достижения, организованные для координации 
деятельности по тестированию.
- планирование тестирования: действие по созданию или изменению планов тестирования.
- подход к тестированию: реализация стратегии тестирования для конкретного проекта. 
Обычно он включает в себя решения, принимаемые на основе целей проекта (тестирования) 
и анализа рисков, начальных точек процесса тестирования, используемых методов 
разработки тестов, критериев выхода и типов тестов, которые необходимо выполнить.
- Основание: Спецификация или программное обеспечение, которое было официально 
рассмотрено или согласовано заранее, является эталоном для дальнейшей разработки 
и может быть изменено только посредством формальной процедуры изменения.
- основа тестирования: Совокупность знаний, которая используется в качестве основы 
для анализа и разработки тестов.
- Базовый бенчмаркинг: метод проектирования тестовых наборов черного ящика, 
в котором тестовые наборы предназначены для выполнения комбинации входных данных 
с использованием модифицированного метода тестирования покрытия нескольких условий.
- основной набор тестов: набор тестовых случаев, полученных из внутренней структуры 
модуля или спецификации, которые достигают 100% указанного критерия покрытия.
- Классификация эквивалентности: Метод проектирования тестовых наборов черного ящика, 
в котором тестовые наборы предназначены для использования элементов из классов 
эквивалентности. В частности, тестовые примеры предназначены для охвата каждого 
класса эквивалентности по крайней мере один раз (т. е. для выбора одного 
представителя из каждого класса эквивалентности).
- Покрытие решений: процент возможных результатов решений, проверенных набором тестов. 
100% охват решений эквивалентен 100% охвату ветвей и подразумевает 100% охват 
операторов.
- покрытие ветки: процент, проверенных набором тестовых случаев. 
100-процентный охват ветвей подразумевает 100-процентный охват решений 
и 100-процентный охват инструкций.
- Покрытие операторов кода: процент исполняемых операторов, протестированных 
набором тестов.
- Покрытие классов эквивалентности: процент классов эквивалентности, которые 
были проверены набором тестов.
- Покрытие кода: Аналитический метод, который определяет, какие части программы 
были выполнены (покрыты) набором тестов, а какие части не были выполнены, например, 
покрытие команд кода, покрытие решений, покрытие условий.
- Покрытие граничных значений: процент граничных значений, проверенных набором 
тестовых случаев.
- покрытие условий: процент покрытия условий, подтвержденный набором тестов. 
Для стопроцентного охвата условий требуется, чтобы каждое отдельное условие 
каждого выражения решения было проверено как на значения True, так и на False.
- Покрытие решений: процент всех возможных результатов простых условий в решениях, 
которые были проверены набором тестов; 100% покрытие условий решения подразумевает 
100% покрытие условий и 100% покрытие решения.
- политика тестирования: документ высокого уровня, описывающий принципы, 
подход и основные задачи организации по тестированию.
- повторяемость теста: Атрибут теста, указывающий, одинаковы ли результаты 
теста при каждом выполнении теста.
- уровень целостности программного обеспечения: степень, в которой программное 
обеспечение соответствует или должно соответствовать набору функций программного 
обеспечения или системных характеристик, выбранных заинтересованными сторонами 
(например, сложность программного обеспечения, оцененный риск, уровень безопасности, 
желаемая производительность, надежность или стоимость).
- уровень риска: Заявление о значимости риска, определяемое его свойствами: 
воздействием и вероятностью. Уровень риска можно использовать для определения 
«уровня» выполняемых тестов.
- уровень тестирования: конкретный экземпляр процесса тестирования.
- приоритет: уровень (деловой) важности, определенный для элемента, например дефекта.
- продукт: Любой произведенный продукт, который должен быть доставлен кому-либо, 
кроме его автора.
- профиль нагрузки: Спецификация активности пользователя, которую тестируемый 
модуль или система может испытывать во время эксплуатации. Профиль рабочей нагрузки 
состоит из определенного количества виртуальных пользователей, которые обрабатывают 
определенный набор транзакций в течение определенного периода времени и в 
соответствии с производственным требованием.
- экстремальное программирование: методология разработки программного обеспечения, 
используемая в гибкой разработке программного обеспечения. 
Его основные методы — парное программирование, тщательная проверка кода, 
модульное тестирование всего кода, ясность и прозрачность кода.
- Парное программирование: метод разработки программного обеспечения, при котором 
строки кода (производство и/или тестирование) модуля пишутся двумя программистами, 
сидящими за одним компьютером. По умолчанию используется проверка кода в реальном 
времени.
- проект: проект представляет собой набор скоординированных и контролируемых действий 
с определенным временем начала и окончания. Он устанавливается для достижения цели 
в соответствии с конкретными требованиями, включая временные, стоимостные и ресурсные 
ограничения.
- проектирование функциональных тестовых случаев: Процедура проектирования и/или 
выбора тестовых случаев, основанная на анализе функциональной спецификации модуля 
или системы без изучения ее внутренней структуры. 
См. также дизайн тестового набора «черный ящик».
- Разработка тестовых наборов на основе ваших спецификаций: см. «Черный ящик» о 
разработке тестовых наборов.
- структурный дизайн тестового примера: см. методы проектирования белого ящика.
- Регистратор: человек, который записывает каждый обнаруженный дефект или предложение 
по улучшению процесса в журнале проверки во время собрания по рассмотрению. 
Регистратор должен следить за тем, чтобы журнал проверки был удобочитаемым и понятным.
- курс тестирования: выполнение теста на определенной версии испытуемого продукта.
- объект покрытия: объект или свойство, которые используются в качестве отправной 
точки для разработки тестов покрытия, таких как классы эквивалентности или 
покрытие кода.
- Объект тестирования: Модуль или система, которая тестируется.
- обзор: оценка продукта или состояния проекта с целью выявления расхождений 
с запланированными предположениями и рекомендаций по улучшению. 
Примеры: проверка со стороны руководства, неформальная проверка, техническая проверка, 
инспекция, проверка.
- формальный обзор: обзор с документированными процедурами и требованиями, 
например, инспекция.
- экспертная оценка: обзор продуктов, созданных во время разработки программного 
обеспечения, коллегами их создателя для выявления дефектов и возможных исправлений. 
Осмотр, обслуживание и пересмотр являются примерами обзоров.
- неофициальный обзор: обзор, не основанный на формальной (документированной) 
процедуре.
- технический обзор: обсуждение в группе коллег, направленное на достижение 
согласия по техническим аспектам.
- рецензент: человек, участвующий в обзоре, который выявляет и описывает отклонения 
в рецензируемом продукте или проекте. Рецензенты могут быть выбраны для представления 
различных точек зрения и выполнения различных ролей в процессе рецензирования.
- обзор: Пошаговое представление автора документа для сбора информации и 
установления общего понимания его содержания.
- Переносимость: легкость, с которой программное обеспечение может быть перемещено 
из одной аппаратной или программной среды в другую среду.
- поток данных: абстрактное представление последовательности и возможных изменений 
состояния объекта данных, где доступны состояния объекта: создание, использование 
или удаление.
- поток управления: порядок, в котором выполняются операции при выполнении 
элемента теста.
- протестированный: программный элемент считается протестированным (проверенным) 
тестовым набором, когда входное значение вызывают выполнение этого элемента.
- руководство по установке: инструкции на соответствующем носителе, которые помогают 
установщику выполнить процесс установки. Это может быть руководство, пошаговая 
процедура или любое другое описание процесса.
- тестовый пример: набор предварительных условий, входных данных, действий 
(если применимо), ожидаемых результатов и постусловий, разработанных на основе 
условий тестирования.
- Низкоуровневый тестовый пример: тестовый пример с конкретными (на уровне реализации)
входными значениями и ожидаемыми результатами. Логические операторы из тестовых 
случаев высокого уровня преобразуются в конкретные значения, соответствующие целям 
логических операторов.
- Тестовый пример высокого уровня: тестовый пример без конкретных (уровня реализации) 
входных значений и ожидаемых результатов. 
Используются логические операторы; фактические значения еще не определены и/или 
доступны.
- Вариант использования: Серия транзакций в диалоге между пользователем и системой 
с ощутимым результатом.
- инкрементная производственная модель: Модель разработки программного обеспечения, 
в которой проект реализуется поэтапно, в циклах, каждый из которых обеспечивает часть 
функциональности всего набора требований. Требования имеют приоритет и реализуются 
в указанном порядке с соответствующими приращениями. В некоторых (но не во всех) 
версиях этой производственной модели каждый подпроект реализуется в соответствии 
с «мини» V-моделью с этапами проектирования, кодирования и тестирования.
- псевдослучайная: строка, которая выглядит случайной, но на самом деле была 
сгенерирована в соответствии с заранее подготовленной последовательностью.
- начальная точка: первое исполняемое выражение внутри модуля.
- точка выхода: последнее исполняемое выражение внутри модуля.
---------------------------
R



















































































































