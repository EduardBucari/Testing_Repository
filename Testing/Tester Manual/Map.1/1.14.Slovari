Словарь тестовых терминов

Словарь терминов позволит вам ознакомиться с лексикой, которую мы будем использовать 
в ходе курса и с которой вы встретитесь в ИТ-индустрии. 
Это облегчит общение в рамках тестирования и совместной работы над проектом.

Словарь основан на официальном словаре терминов, связанных с тестированием, 
подготовленном Ассоциацией качества информационных систем (SJSI).

Этот словарь имеет две основные цели:
- облегчить понимание программ ISTQB, определив термины, используемые 
в разных программах.
- облегчать общение в международной среде тестирования и ее заинтересованных 
сторон, вводя стандартную лексику.
------------------
- актор: пользователь или любое другое лицо или система, которые определенным 
образом взаимодействуют с тестируемой системой.
- анализ рисков: процесс выявления рисков и их оценки.
- статический анализ: процесс оценки модуля или системы без их выполнения на 
основе их формы, структуры, содержания или документации.
- Анализ граничных значений: метод проектирования тестовых случаев черного ящика, 
при котором случаи разрабатываются на основе граничных значений.
- анализ воздействия: выявление всех затронутых рабочих продуктов, включая 
оценку ресурсов, необходимых для внесения изменений.
- статический анализатор кода: инструмент, выполняющий статический анализ кода.
- атака: Целенаправленное действие для оценки качества, в частности надежности 
объекта тестирования, путем принудительного возникновения определенного сбоя.
- качественный атрибут: черта или свойство, влияющее на качество объекта.
- Автоматизация тестирования: использование программного обеспечения для выполнения 
или поддержки тестовых действий, таких как управление тестированием, разработка 
тестов, выполнение тестов и проверка результатов.
- авария, сбой: отклонение модуля или системы от ожидаемого поведения или результата.
-------------------
- Безопасность: Способность системы при определенных условиях избегать достижения 
состояния, представляющего опасность для жизни, здоровья, имущества или 
окружающей среды человека.
- белый ящик (методы проектирования тестов) : Процедура создания и выбора 
тестовых случаев на основе анализа внутренней структуры модуля или системы.
- ошибка (error): действие человека, которые привели к неверному результату.
--------------------
- Цель теста: Причина или повод разработки и выполнения теста.
- сертификация: процесс подтверждения того, что модуль, система или человек 
соответствуют указанным требованиям. Сертификат можно получить, например, сдав экзамен.
- COTS: аббревиатура от Commercial Off-The-Shelf Software.
Готовое коммерческое программное обеспечение.(Рабочее ПО с полки).
- Жизненный цикл программного обеспечения: период времени, который начинается, 
когда возникает идея программного обеспечения, и заканчивается, когда программное 
обеспечение больше не доступно для использования. Как правило, жизненный цикл 
программного обеспечения включает этап концепции, этап требований, 
этап проектирования, этап внедрения, этап тестирования, этап установки и замены, 
этап производственного использования и обслуживания, а иногда и этап 
вывода из эксплуатации. 
Примечание: Эти этапы могут перекрываться или повторяться.
- черный ящик (Техника проектирования тестов) : процедура получения и выбора 
тестовых наборов на основе анализа спецификации, функциональной или 
нефункциональной, модуля или системы без привязки к ее внутренней структуре.
--------------------
- тестовые данные: данные, созданные или выбранные для выполнения предварительных 
условий и указания входных данных для выполнения тестовых случаев.
- Входные данные теста: данные, полученные из внешнего источника и переданные 
тестовому объекту во время выполнения теста. Внешний источник может быть 
аппаратным, программным или человеческим.
- отладка: процесс поиска, анализа и устранения причин сбоев программного обеспечения.
- решение: Тип утверждения, в котором выбор между двумя или более возможными 
результатами приводит к выполнению определенного набора действий.
- Дефект: Несовершенство или дефект в рабочем продукте, заключающийся 
в несоответствии требованиям.
- Диаграмма состояний: Диаграмма, показывающая состояния, которые может принимать 
модуль или система, а также события или обстоятельства, вызывающие и/или 
являющиеся результатом изменений состояния.
- домен: коллекция, из которой выбираются входные или выходные значения.
--------------------
- эффект семплера: эффект элемента измерения, влияющего на модуль или систему 
при выполнении измерения, например, с помощью инструмента проверки производительности. 
Например, производительность тестируемого программного обеспечения может немного 
ухудшиться при использовании тестового инструмента.
- тестовый эффект: набор критериев выхода.
- элемент тестирования: элемент объекта тестирования, который используется 
в процессе тестирования.
- эмулятор: Устройство, компьютерная программа или система, которые принимают 
те же входные данные и производят те же выходные данные, что и данная система.
--------------------
- фаза тестирования: выделенный набор тестовых действий, собранных на управляемой 
фазе проекта, например выполнение теста на некотором уровне тестирования.
- фаза выполнения теста: период в цикле разработки программного обеспечения, 
в течение которого создаются программные модули и оценивается само программное 
обеспечение, чтобы решить, были ли выполнены требования.
- Фаза требований: период времени в жизненном цикле программного обеспечения, 
в течение которого требования к программному обеспечению собираются и документируются.
- Функциональность: способность программного обеспечения обеспечивать функции, 
соответствующие определенным и ожидаемым потребностям, когда программное 
обеспечение используется в определенных условиях.
--------------------
- Плотность ошибок: количество ошибок, обнаруженных в модуле или системе, 
на единицу размера модуля или системы (выраженное в виде стандартной меры 
программного обеспечения, например, в строках кода, количестве классов или 
функциональных точек).
- основной план тестирования: план тестирования, охватывающий несколько 
уровней тестирования.
--------------------
- график тестирования: список действий, задач или событий из процесса тестирования 
с указанием их предполагаемых дат начала и окончания, времени выполнения и их 
взаимосвязей.
- График выполнения теста: график, описывающий последовательность, в которой 
тестовые наборы выполняются в рамках цикла тестирования.
- гиперссылка: указатель в электронном документе, который ссылается на другой 
электронный документ.
- история пользователя: поддающееся тестированию бизнес-требование, обычно 
используемое в Agile-разработке программного обеспечения, обычно состоящее из 
одного предложения, описывающего, какая утилита нужна пользователю и по каким 
причинам, а также нефункциональные критерии и критерии приемлемости.
------------------
- идентификация риска: процесс выявления рисков с использованием таких методов, 
как мозговой штурм, контрольные списки, история неудач.
- реализация теста: деятельность по подготовке тестового программного обеспечения, 
необходимого для выполнения теста, на основе анализа и дизайна теста.
- инцидент: любое событие, которое необходимо расследовать.
- инспекция: Тип формальной проверки, выполняемой для выявления проблем в рабочем 
продукте, который предоставляет данные измерений для улучшения процесса проверки 
и процесса разработки программного обеспечения.
- инструкция: элемент языка программирования, который обычно является наименьшей 
атомарной единицей выполнения.
- исполняемая инструкция : выражение, которое преобразуется в двоичный код во 
время компиляции и которое будет процедурно выполняться во время работы программы. 
Она может выполнять действия над данными программы.
- интеграция: процесс объединения модулей или систем в более крупные группы.
- Модель итеративной разработки: жизненный цикл разработки программного обеспечения, 
в котором проект разбивается на несколько итераций. 
Итерация — это замкнутый цикл разработки, результатом которого является готовая 
к выпуску версия продукта (внутренняя или внешняя).
-------------------
- качество: степень, в которой модуль, система или процесс соответствует заданным 
требованиям и/или соответствует потребностям и ожиданиям заказчика или пользователя.
- качество данных: характеристика данных, которая демонстрирует их правильность 
по заранее определенным критериям, например бизнес-требованиям, требованиям 
целостности данных, непротиворечивости данных.
- качество программного обеспечения: все функциональные возможности и особенности 
программного обеспечения, характеризующие способность удовлетворять заявленные 
или ожидаемые потребности.
- jarzmo testowe: тестовая среда, состоящая из подключаемых модулей и драйверов, 
необходимых для выполнения теста.
- язык скриптов или сценариев: язык программирования, на котором написаны тестовые 
сценарии, используемые инструментом запуска теста (например, инструментом 
записи/воспроизведения).
-------------------
- kamień milowy (веха): точка во время реализации проекта, для которой были 
определены (промежуточные) продукты и результаты.
milestone - a stone set up beside a road to mark the distance in miles to a 
particular place.
- руководитель тестирования: лицо, ответственное за управление проектом по тестированию, 
за ресурсы, за действия в тестировании, и за оценку элемента тестирования. 
Лицо, которое направляет, управляет, администрирует, планирует и регулирует 
оценку испытуемого.
- класс эквивалентности: подмножество области значений элемента тестового объекта, 
для которого на основе спецификации предполагается, что все значения будут 
обрабатываться системой одинаково.
- код: компьютерные инструкции и определения данных, выраженные на языке 
программирования или выведенные на ассемблере, компиляторе или трансляторе.
- Test Comparator: тестовый инструмент для автоматического сравнения фактических 
результатов с ожидаемыми.
- компилятор: Инструмент, который переводит программы, написанные на языке 
высокого уровня, в их аналоги на машинном языке.
- конфигурация: расположение модулей или система, определяемая числами, их природой 
и связями между ее компонентами.
- Контроль за конфигурацией: Компонент управления конфигурацией, 
состоящий из оценки, согласования и одобрения или несогласия с изменением 
элементов конфигурации и внедрения изменений после формальной идентификации 
элемента конфигурации.
- мастер установки: Программное обеспечение на подходящем носителе, которое 
помогает установщику выполнить процесс установки. Как правило, он выполняет 
процесс установки, сообщает о его результатах и ​​предлагает вам выбрать вариант.
- Критерии приемки: критерии выхода, которым должен соответствовать модуль или 
система, чтобы быть принятыми пользователем, заказчиком или другим 
квалифицированным лицом.
- критерии возобновления: критерии, используемые для возобновления некоторых 
или всех операций тестирования, которые ранее были приостановлены.
- Критерии прохождения/непрохождения: правила принятия решений, используемые 
для определения того, прошел ли тест объект или функция.
- Критерии приостановки: Критерии, используемые для (временной) остановки 
всех или части тестовых действий над элементами теста.
- Критерий входа: Набор общих и конкретных условий, которые необходимо выполнить 
для продолжения процесса для конкретной задачи, например фазы тестирования. 
Цель критерия входа состоит в том, чтобы защитить задачу от запуска, когда 
она влечет за собой больше (бесполезной) работы, чем работа, необходимая 
для выполнения критерия входа.
- Критерий выхода: набор общих и конкретных условий, согласованных с 
заинтересованными сторонами, необходимых для официального завершения процесса. 
Цель критерия выхода — не допустить, чтобы задача считалась выполненной в том случае, 
если некоторые ее элементы еще не полностью выполнены. 
Критерии выхода используются в качестве аргумента против завершения теста 
и для планирования того, когда это можно сделать.
---------------------------
- журнал тестирования: хронологическая запись деталей, связанных с выполнением теста.
- ведение журнала испытаний: процесс регистрации информации о проведенных 
испытаниях в журнале испытаний.
---------------------------
- тестирование на обезьянах: метод тестирования, который случайным образом выбирает 
из широкого диапазона входных данных и нажимает кнопки случайным образом, 
игнорируя способ использования продукта.
- Agile манифест. (Манифест гибкой разработки программного обеспечения)
Определение принципов, лежащих в основе гибкой разработки программного обеспечения. 
Эти правила таковы:
- люди и совместная работа выше чем процессы и инструменты;
- работающее программное обеспечение выше обширной документацией;
- тесное общение с клиентом выше формальных договоренностей;
- Реагирование на изменение выше чем следования плану.
---------------------------
1.4. м. мара




































































