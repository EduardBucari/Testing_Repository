Структура приложения

Каждое веб приложение организовано в структуру определенного типа.
В зависит от используемого языка программирования или технологии 
выделяют два типа подходов:

1. opinionated - (самоуверенный, упрямый) - означает, что вы знаете структуру заранее, 
прежде чем писать свое приложение и рекомендуется для всех разработчиков 
данной технологии;
2. un-opinionated - (безучастный) - этот подход дает вам больше свободы 
(что имеет свои преимущества и недостатки). Затем архитектор программного обеспечения 
должен выбрать, как структурировать приложение и частично программистов.

От чего зависит структура приложениямия ?
- выбор технологий (так называемый стек технологий) — выбирают архитектуру и 
программные технологии, которые лучше всего соответствуют вашим бизнес-предположениям.
- веб-сервер данного языка программирования, у разных языков и технологий свои
требования. Например, для запуска программы, написанной на php вам понадобится сервер
такой как nginx или Apache. Для запуска программы, написанной на java есть дргой
тип серверов JBoss, Tomcat, Jetty. Для .NET используются IIS. Однако для Node.js
не требуется внешний веб-сервер. 

Рассмотрим основные, наиболее распространенные элементы в структуре веб-приложений.

1. Базы данных
База данных позволяет сохранять, изменять и удалять определенную информацию.
Приложение, взаимодействующее с базой данных, может рассчитывать на то, что оно 
хранит данные упорядоченно и непрерывно (независимо от завершения работы приложения 
или сервера).
Существует множество типов баз данных: реляционные, нереляционные, графические
и другие, а также множество конкретных технологии баз данных: 
MySQL, MS SQL, Postgresql, SQLite, MongoDB и многие другие.

2. Сервер
Сервер - позволяет любому типу приложений эффективно взаимодействовать с миром.
На сервере появляется код, написанный программистами.
Его основа это LAMP:
L = Linux (ОС),
A = Apache (веб-сервер),
M = MySQL (база данных),
P = PHP (язык програмирования)

3. Обратный прокси-сервер и балансировщик нагрузки.
Для оптимизации и распределения трафика между несколькими веб-серверами, 
используются обратный прокси-сервер или балансировщик нагрузки.
Они позволяют лучше управлять трафиком (распределяя трафик) и даже берут на себя 
часть обязанностей (например, так называемое HTTP-согласование или установление 
безопасного соединения).
Хотя это не обязательный компонент веб-приложения, он часто используется в
большенстве сайтов.

4. Статический файловый сервер
Есть еще один элемент, который используется для ускорения больших сайтов. Это сервер
Обслуживания статических файлов, т.е. файлов, которые не зависят от кода, и всегда 
выглядят одинаково.
Такими файлами являются, например, изображения, звуки или видео. Вместо того, 
чтобы иметь дело с отправкой их через сервер (который будет обрабатывать код), 
можно настроить отдельный сервер, его единственная задача обслуживание таких файлов.
Из-за этого получение таких файорв происходит очень быстро. 
Таким образом, вы можете использовать, например сервер nginx.