База Данных.

Базы данных — это приложения, единственной целью которых является хранение, 
анализ и возврат данных.
Приложение базы данных должно реализовывать следующие возможности:
- хранение данных,
- добавление, удаление и изменение данных,
- управление доступом к данным.

Почему мы используем базы данных?
Мы используем базы данных, когда у нас есть объем данных в нашем проекте.
Хранение таких данных в специальной базе данных позволит нам быстро управлять 
такой коллекцией и легко делиться ею с другими программами.
Базы данных также помогают решить следующие проблемы:
- хранение очень больших наборов данных (они очень хорошо оптимизированы для памяти)
- быстрый поиск и сортировка наборов данных
- объединение данных в отношения

Типы баз данных:
1. Иерархический
Об иерархических базах данных существуют родительско-дочерние отношения. 
Этот тип базы данных был создан IBM в 1968 году и больше не используется.

2. Объектно-ориентированные
Базы данных, созданные на основе идеи объектно-ориентированного программирования. 
Объекты данных класса хранятся в памяти. Полезно для хранения мультимедийных файлов. 
Они не очень популярны, потому что они дороги в обслуживании.

3. Реляционные
Базы данных, ориентированные на отношения между данными. Данные в таких базах данных 
представлены в виде двумерных таблиц, где каждый столбец является атрибутом, 
а строка — данными.

4. Нереляционные
Новейший подход к базам данных. Мы храним данные в виде пар ключ-значение, 
где значения не имеют единой структуры. Легко масштабируется и быстро работает 
с большими наборами данных.
----------------

Реляционные БД.
За реляционной моделью стоит идея связывания данных в отношения друг с другом. 
Начнем с объяснения того, как данные хранятся в базе данных. 
Мы будем работать над базой данных (очень упрощенной), содержащей информацию 
для виртуального школьного журнала.
В нашей базе данных мы будем хранить следующие данные:
- Данные всех студентов, т.е. имя, фамилия и адрес электронной почты родителя,
- Данные всех учителей, т.е. имя, фамилия и их зарплата в час,
- Данные всех классов, т.е. их имя, классный руководитель и список всех учеников,
- Данные всех оценок, т.е. сама оценка с информацией, кем и кому поставлена.

Как хранятся данные в базе данных?
В реляционной базе данных каждый тип данных (иногда также известный как сущность) 
хранится в отдельной таблице. Таблицы в базе данных аналогичны таблицам в Excel, 
где в столбцах у нас есть все поля, которые можно сохранить. 
Некоторые из этих столбцов будут обязательными — без их предоставления база данных 
не примет новую информацию. В каждой строке хранится одна запись, 
каждая из которых представляет один уникальный набор информации 
(например, данные одного учащегося).

Уникальность данных — первичный ключ.
Ранее мы упоминали, что каждая запись в нашей базе данных должна быть уникальной. 
Это достигается за счет использования первичного-ключа. Это один из столбцов в 
нашей таблице (обычно первый столбец), который содержит автоматически сгенерированный 
номер, уникальный для этой таблицы. 
Это число становится идентификационным номером для этой строки. 
Значение первичного ключа в 99% случаев присваивается базой данных автоматически 
и мы не должны в это вмешиваться.

Схема нашей базы данных.
Ниже вы можете увидеть схему таблицы в базе данных, над которой мы будем работать. 
Эта схема неполная — в ней отсутствуют связи между таблицами и связанными столбцами 
и дополнительными таблицами.

В реляционных базах данных существует три отношения между таблицами:
- один к одному,
- один ко многим
- многие ко многим.

- один к одному - Связь, при которой один элемент данной таблицы может быть связан 
только с одним элементом другой таблицы. Он очень редко используется.
Пример:
Учитель может быть классным руководителем только одного класса. 
В классе может быть только один классный руководитель.

- один ко многим - Связь, в которой один элемент из данной таблицы может быть 
присоединен к нескольким элементам из другой таблицы.
Пример:
Студент может принадлежать только к одному классу, в классе может быть много учеников.

- многие ко многим - Отношение, при котором несколько элементов из одной таблицы 
могут быть присоединены к нескольким элементам из другой таблицы.
Пример:
Класс может вести несколько учителей, один учитель может вести несколько классов.
---------------
Связи или отнощения в базе данных.
Мы также будем использовать отношения в нашей тестовой базе данных. 
Ниже перечислим, какие отношения встречаются и как мы их получим:
- Ученик принадлежит к одному классу, в одном классе много учеников — это отношение 
получается добавлением столбца class_id в таблицу «Студенты».

- Классный руководитель может вести один класс, в одном классе есть один классный 
руководитель — это отношение получается добавлением столбца class_id в 
таблицу «Учителя» и добавлением столбца main_teacher_id в таблицу «Классы».

- У учащегося может быть несколько оценок, но оценка выставляется одному 
учащемуся — эта связь получается добавлением столбца student_id в 
таблицу Marks (Оценки).

- Учитель может ставить несколько оценок, но оценка ставится одним учителем — этот 
отчет получается добавлением столбца «teacher_id» в таблицу «Marks».

Схема нашей базы данных.
Ниже вы можете увидеть схему таблицы в базе данных, на которой мы будем работать 
с уже добавленными отношениями и необходимыми для них столбцами.

Как мы общаемся с базой данных?
Мы уже знаем, что такое база данных и как в ней хранятся данные. 
Но у нас остался еще один важный вопрос: как мы будем взаимодействовать 
с базой данных?
Для общения с базой данных используются специальные языки. 
Мы изучим самый популярный из них — SQL. Использование такого языка похоже 
на разговор. Это означает, что мы будем задавать вопросы, а база данных будет 
на них отвечать. Каждый наш вопрос вызовет одну реакцию в базе. 
Реакции могут быть разными: это может быть возврат нам набора данных, 
это может быть модификация существующих данных или создание в базе данных 
совершенно новой информации.

























