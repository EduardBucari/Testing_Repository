JIRA Базовый - LEAN философия и доска KANBAN

Lean Software Development - Бережливая разработка ПО и инструмент,
который используется для того что-бы следовать этой методологии - наша 
долска KANBAN.

Что такое LEAN и для чего он используется ?
Изначально методология LEAN была введена в Японии на заводе Тойота для 
того что бы уменьшить риски во время работы над проектом. Снижение рисков
в производстве достигалось за счет уменьшения производственных отходов и 
увеличения качества продукции.

LEAN - Бережливое производство  (от англ. lean - худой, скудный, тощий).
Это концепция управления производственным предприятием, которая основана
на постоянном стремлении предприятия к устранению всех видов потерь.
Бережливое производство предпологает вовлечение в процесс оптимизации каждого 
сотрудника и максимальную ориентацию на потребтьеля.

Основные принципы LEAN в разработке ПО:
1. Устранение отходов
2. Усиление обучения
3. Принятие решений как можно позже 
4. Доставка как можно быстрее
5. Расширение возможностей команды
6. Внедрение качества
7. Видение всего - целым обьектом

1. Устранение отходов - данная метология выделяет 9 видов отходов:
   - Ненужные функции и команд 
   - В журнале больше задач, чем можно выполнить
   - Задержки в процессе проектирования
   - Расплывчатые требования
   - Неэффективное общение
   - Проблемы с качеством
   - Ненужная и разрушающая бюрократия
   - Дублирование данных
   - Затраты на вышеупомянутые виды отходов

2. Усиление обучения - помимо изучения всех возможных методов для внедрения 
   нового функционала, данный пункт подразумевает:
   - Короткие циклы разработки
   - Раннее  тестирование 
   - Частая обратная связь с заказчиком
Данный принцип говорит о том что мы не должны слишком глубоко 
сосредотачиваться на одной идее, прежде чем мы полность не изучили все ее
другие альтернативы. Допустим у нас есть прототип какой-то новой функции и
прежде чем внедрять этот прототип мы должны сделать еще нескольео таких 
прототипов и выбрать из них лучший или взять из всех прототипов наилучшее и 
соединить их в одно. Это как раз подводит к третьему принципы - принятие 
решений как можно позже. 

3. Принятие решений как можно позже - мы сначала изучаем все возможные 
   варианты и только потом внедряем тот продукт, который имеет высокую 
   ценность.

4. Доставка продукта на рынок как можно быстрее - основывается на концепции
   MVP (минимально жизниспособный продукт) и общая философия:
   - Создать быстро, включать мало функциональных возможностей и запускать 
   продукт на рынок как можно быстрее. Затем изучаем реакцию.
Такой подход позволяет постепенно улучшать часть ПО на основе отзывов 
полученных от реальных клиентов, и отказываться от всего что не имеет 
ценности.

5. Расширение возможностей команды.
Лучший руководитель тот, кто может собрать нужных людей ипри этом не путаться 
у них под ногами, когда они работают. 

6. Внедрение качества - команда разработчиков должна использовать лучшие 
практики и нтструменты, что-бы избежать ошибок и обеспечить высокое качество. 

7. Видение всего - целым обьектом. В разработке важно думать о продукте 
в целом, прежде чем выпускать его. Это означает что разработчики должны 
быть постоянно в курсе того как небольшие части вписываются в общую картину.
--------------------
LEAN это методология, набор инструментов и практик которые позволяют
создавать лучшее ПО.
А как нам работать по методу LEAN ? 
Для этого и был создан инструмент KANBAN.

"Just in time" manufacturing  или производство "Точно вовремя" -  это 
подразумевает удовлетворение покупательского спроса по времени, качеству и
количеству с минимальными отходами (т.е. затрат времени и ресурсов).

Bottle neck в Lean.
Bottle neck - Узкое место или пропускная спопсобность процесса.
Узкое место (или бутылочное горлышко-Bottleneck) - явление, при котором 
производительность или пропускная спопсобность системы ограничена одним или 
несколькими компанентами или ресурсами.
Относительно бизнеса узким местом является фактор, ресурс, процесс или 
подразделение, которое ограничивает общую производительность определенным
верхним пределом даже при условии существенного увеличения 
производительности всех остальных компанентов.
Как избавиться от эфекта Bottleneck ?
1. Увеличить производство процесса узкого места (при этом увеличить и
   потребление ресурсов).
2. Уменьшить производство на прошлых этапах( и при этом устранить ненужную
   работу или уменьшить количество задач на предедущих процессах).

Время цикла.
Важно понимать разницу.
KANBAN использует время выполнения (lead time) и время цикла (cycle time)
для подсчета производительности:
- Время выполнения: Время между созданием задачи и ее завершением.
- Время цикла: Время между началом выполнения задачи и ее завершением.
Например, заложено время выполнения 1 день, а затратили на выполнение 
задачи (время цикла) всего 1 час.

