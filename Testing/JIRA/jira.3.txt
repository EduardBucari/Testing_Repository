JIRA Базовый курс - pre-AGILE методологии разработки. 
Их модели и Унифицированный процесс.

Рассмотрим следующие модели разработки:
   - Линейные модели:
1. Каскадная модель / Водопад
2. V-образная модель
3. Пилообразная модель
   - Спиральные модели:
4. Спиральная модель
   - Итерационные модели:
5. Унифицированные процессы. 

Все мотодологии разработки делятся на 3 подгруппы:
- Линейный процесс (1. Каскадная модель / Водопад; 2. V-образная модель;
                    3. Пилообразная модель).
- Спиральный процесс (4. Спиральная модель)
- Итеррационный процесс ( модель Унифицированных процессов)

Линейные процессы - это линейная модель разработки ПО состоящая
из последовательных шагов, без их перечисления по времени, результатом
которых является програмный продукт.
Линейные модели разработки хорошо работают, когда требования полностью 
понятны и стабильны, план-график не слишком загружен, достаточно ресурсов,
а методики хорошо документированы.

1. Каскадная модель / Водопад - классическая модель жизненного цикла 
разработки ПО. Она включает последовательность шагов, ведущих от анализа
к проектированию, кодированию и далее к интеграционному и системному 
тестированию.
Следуя каскадной модели, разработчик переходит от одной стадии к другой 
строго последовательно, без возможности вернутся к предыдущим фазам.

Преймущества каскадной модели:
- Разработку просто контролировать. Заказчик всегда знает, чем сейчас 
заняты программисты, может управлять сроками и стоимостью.
- Стоимость проекта определяется на начальном этапе. Все шаги запланированы 
уже на этапе согласования договора, ПО пишется непрерывно от начала до конца.
- Не нужно нанимать тестировщиков с серьезной технической подготовкой.
Тестировщики могут опираться на подробную техническую документацию.

Каскадная модель уделяет огромное время именно документации. 
Она требует что бы каждый шаг был задокументирован от А до Я и что бы не 
возникало между этапами никаких недопониманий.

Один из главных недостатков модели Вотерфол это то что мы не можем вернуться 
на прошлый этап. Так же клиент очень мало вовлечен в процесс разработки,
так как он видит продукт в самом конце. 

2. V-образная модель - эта модель похожа на модель ВОТЭРФОЛ, но происходит
с другой последовательностью. Задачи разработки идут сверху вниз, а задачи
тестирования с низу вверх.
V-образная модель базуруется на том, что
- Приемо-сдаточные испытания основываются, прежде всего, на требованиях.
- Системное тестирование - на требованиях и архитектуре.
- Комплексное тестирование - на требованиях, архитектуре и интерфейсах.
- Компонентное тестирование  - на требованиях, архитектуре, интерфейсах и 
  алгоритмах.

Плюсы этой модели - возможность тестировать каждый этап разработки.
Недостаток:
Так же как и в первой модели клиент очень мало вовлечен в процесс разработки.

Для возможности контроля этапов разработки со стороны заказчика, была 
разработана Пилообразная модель.

3. Пилообразная модель похожа на первые две модели. Единственное различие 
между ними состоит в том, что прототипы создаются и показываются на 
валидации между критическими фазами.
Прототипы присутсвуют сразу после этапа анализа и между этапами 
проектирования и внедрения. Убедившись, что клиент получает информацию
о ходе работы, контрольные точки должны гарантировать, что разработка
идет в правильном направлении.

Все эти три модели объединяет последовательность этапов. 
Это является как преймуществом так и не достатком (невозможность вернуться 
на прошлые шаги)
Эти модели простые в использовании, но они не всегда могут быть удачными.
Эти модели широко используются при создании ПО, которое уже неоднократно
создавалось ранее, с известной документацией, подробными инструкциями и 
стандартом. (Например производство по ГОСТУ). 

   - Итерационные модели.
Интерационные модели позволяют вернуться и  измененить прошлые этапы.
Эти модели называются pre-AGILE методологии разработки.
Эти методологии позволяют разрабатывать продукт итерациями, с добавлением 
на каждой итерации функциональных возможностей. При этом, в начале 
определяются все требования к продукту, а возможно и разрабатывается 
предварительный проект.

В каждой итерации разработка выполняется последовательно по кругу и 
завершается выпуском работоспособной версии програмного продукта(инкремента).

4. Спиральная модель.
Спиральная модель представляет шаблон процесса разработки ПО, который сочетает
идеи каскадной и итерационной моделей.
Суть ее в том, что весь процесс создания конечного продукта представлен в
виде условной плоскости, разбитой на 4 сектора, каждый из которых 
представляет отдельнные этапы разработки:
- определение целей
- оценка рисков
- разработка и тестирование
- планирование новой итерации

Главная особенность спиралькой модели - концентрация на возможных рисках.
Для их оценки даже выделена соответствующая стадия.
Основные типы рисков, которые могут возникать в процессе:
- Нереалистичный бюджет и сроки 
- Дефецит специалистов
- Частые изменения требований
- Чрезмерная оптимизация
- Низкая производительность системы
- Несоответствие уровня квалификации специалистов разных отделов.

Недостатком такой модели является количество информации которое требуется 
для планирования итераций. Если наша фаза или итерация является очень 
длительной по времени, нам требуется очень много информации что бы
правильно расчитать риски и количество задач у функционала, которые мы 
сможем внедрить за эту итерацию.
Плюсом модели является то что клиент может конролировать результат
после каждой итерации, вносить свои изменения, добавлять или убирать
функционал.

5. Унифицированная модель (Unified Process).
Унифицированная модель - базируется на спиральной модели т.е. основана
на сценариях использования, описывающих одно или несколько действующих лиц,
взаимодействующих с системой и получающих результаты, представляющие
ценности для участников процесса.

Именно сценарий использования является основной движущей силой, управляющей
всем процессом разработки, начиная со сбора и обсуждения требований, и 
заканчивая анализом, дизайном и имплементацией.

Основным решением, принимаемым в ходе проекта, является архитектура итоговой
программной системы.
Архитектура устанавливает набор компонентов, из которых будет построено ПО,
ответственность каждого из компанентов (т.е. решаемые им задачи в рамках 
общих задач системы), четко определять иньерфейсы, через которые они могут
взаимодействовать, а так же способы взаимодействия компонентов друг с другом.

Рассмотрим подробнее наш унифицированный процесс.
Ход процесса разработки.
Архитектура этого процесса состоит из нескольки конструкций которые 
выполняются итерационно, но каждая из этих конструкций может перекрывать 
друг друга. Это значит что в то время когда общая конструкция нашей модели 
строится итеративно, сама модель позволяет что бы одни задачи перекрывались 
другими и работали паралельно. Таким образом, вместо того что бы переходить
от одного этапа к другоиу последовательно, разработчики могут в внутри
каждой из фаз работать в нескольких этапах одновременно.

Как строится и создается наш унифицированный процесс.
Построение процесса.
Схема нашего унифицированного процесса заключается в том что-бы на одной 
оси у нас по горизонтали есть наши этапы или фазы разработки 
(это начальная фаза, фаза разработки, фаза постройки или 
програмирования и фаза передачи нашего продукта), а по вертикали у нас есть 
наши роли и задачи, которые выполняет команда в процессе разработки этого 
продукта (бизнес моделирование, Технические задания и цели, Анализ и Дизайн, 
Внедрение и имплементирование, Тестирование и фаза передачи нашего продукта).

Фазы унифицированного процесса:
1. Начальная фаза - разумное описание того на сколько жизниспособным является 
продукт, какова будет стоимость разработки, сколько займет времени разработка
и какие риски мы можем ожидать в процессе работы. 
2. Фаза разработки - цель этого этапа состоит в том что-бы создать модель или
прототип продукта, который мы будем разрабатывать. В конце этого этапа
разработчики представляют план развития на следующих этапах.
3. Фаза постройки или програмирования - это относительно простой этап и 
проходит он итеративно.