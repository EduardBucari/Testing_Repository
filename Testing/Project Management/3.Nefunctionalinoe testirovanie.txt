Введение в нефункциональное тестирование (НФТ).

Тестирование это непрерывное изучение нашей системы и это творческий процесс.

Нефункциональное тестирование - проверка качественных характеристик системы,
таких как: производительность, отказоустойчивость, масштабируемость, удобство
пользования и т.д.

Функциональные тестирование - отвечает на вопрос "ЧТО" , 
что делает данное приложение?
Функциональные тестирование проверяет саму суть нашей системы, 
т.е. то для чего она была создана. Поэтому технические требования
для этого тестирования описаны очень подробно.


Нефункциональное тестирование - отвечает на ворос "КАК",
как работает данное приложение ? 
как долго выполняет операции ?
как много операции проделывает в секунду ? 
как удобно это приложение в работе ?

Часто технические требования для нефункционального тестирования
описываются очень размыто (заказчик хочет что бы система была 
быстрой и устойчивой).


Ключевые слова:
Failover -
KPI - 
Baseline - 
Recovery - 
Latency - время отклика.
RTT (Round Trip Time) - время полного оборота.
Capacity - емкость системы
Resilience - Отказоустойчивость
Scalability - масштабируемость

Финансосовая инфраструктура или социальная сеть - (как явный пример) 
это распределенное приложение, запущенное на большом колличестве серверов, 
которое получает от клиента заявки или запросы и отвечает на них.

Какие нефункциональные характеристики тестируются ?

1. Performance - Производительность системы. 
Необходима реалистичная нагрузка и не ограничеваться имитацией нагрузки 
из продакшена.
Грамотным подходом является перед началом тестирования производительности, 
заказчику необходимо изучить рынок, так же необходимо учитывать фактор 
неожиданности (а что если ?).
Даже если мы что-то протестировали и не собираемся чинить или изменять 
тестируемые параметры, в любом случае мы стали лучше понимать нашу систему
и знаем ее сильные и слабые стороны. 

  Одна из самых важных характеристик при тестировании Производительности 
системы - это Время отклика (Latency). 
- Здесь тестируется RTT (Round Trip Time) - время полного оборота. Это 
разница во времени между тем как поступила заявка от клиента и тем 
временем как клиент получил ответ.
RTT вычисляется для каждого сервера отдельно.
- Время отклика между компанентами системы.
- Время отклика для всех транзакций.

2. Bursts - неожиданный всплеск нагрузки.
Обычно можно прогнозировать нагрузку на систему (увеличение может быть 
вечером или днем, в начале недели или в конце, и от новостей, которые
предсказать невозможно). В течении нескольких минут нагрузка на систему может
увеличиться в 100 раз и если это на пример торги на бирже,
главное что-бы система в этот момент не вышла из строя.

3. System Limits - Тестирование ограничений системы.
Какое максимальное колличество заявок в секунду, в менуту или даже в день, 
может обработать наше приложение.

4. Slow consumers - медленные потребители.
Из-за неполадки со стороны клиента или из-за плохого интернет соединения 
случается ситуация, когда клиент перестает принимать запрашеваемые данные.
Поэтому приложение должно быть построено таким образом, что-бы
отлавливать эту ситуацию и правильно реагировать. 
В пртивном случае такая ситуация приводит к утечкам памяти и 
приложение потребляет все больше и больше памяти пока не упадет.

5. Rapid users protection - защита от слишком быстрого потребления.
Это противоположная ситуация, когда клиент посылает много заявок.
В этом случае применяется ограничительный механизм Throttling (Дросселирование)
Throttling это важный механизм защиты нашей системы от вредоносных атак.

6. Capacity - емкость системы.
Емкость системы - это то сколько система может в себя вместить за
определенный промежуток времени.

Если емкости не достаточно, что можно предпринять ?
- Scalability (масштабируемость) это так же не функциональная характеристьика.
Масштабируемость бывает двух видов:
Horizontal (есть 6 серверов и мы добавляем еще 6 и в итоге мы ожидаем 
что наше приложение будет работать быстрее).
Vertical (старые машины меняются на новые и более быстрые). 

Верикальная масштабируемость - Является физически ограниченной той моделью
оборудования которая есть на рынке.
Горизонтальная масштабируемость - не имеет ограничений т.к. серверовможно
покупать сколько угодно.

Но есть мнение что если было 6 серверов, а стало 12, тогда система станет 
в 2 раза более производительной. Это не совсем так. В системе может быть
бутолочное горлышко, которое ограничит возможности системы по масштабируемости
и новые сервера никакого толку иметь не будут и сделают только хуже.
Поэтому этот параметр так же подлежит тщательному тестированию.

7. Portability - переносимость.
То на сколько легко перенести приложение в другую среду, с одной ОС на другую
или с одной БД на другую. Для хорошо спроектированного приложения эта миграция
должна проходить легко и безболезненно.

8. Resiliency - Отказоустойчивость.
Отказоустойчивость - это свойство системы продолжать свои операции
после того как один из ее узлов вышел из стороя. Тестирование заключается 
в том чтобы проверить ситуацию когда один из трех узлов не работает и 
на как справятся остальные два с увеличенной нагрузкой. Конечная идея
заключается в том что-бы клиент не заметил что у нас что-то сломалось.
